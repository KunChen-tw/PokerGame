<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAaxgVFv4QDg7/GRcY/woJCf8gHR7/LSor/y0pKv8tKSr/LSkq/y0p
        Kv8tKSr/LSkq/y0pKv8tKSr/LSkq/y0pKv8vLC3/IB4f/woJCf8ZFxj/EA4P/xgVFv4AAABrAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgMCwuzjn+D/0dAQv+Fe3//PDg6/8O3u//k1tr/4tTY/+LU
        2P/i1Nj/4tTY/+LU2P/i1Nj/4tTY/+LU2P/i1Nj/4tTY/8e5vf+5q6//PTg6/4V7f/9HQEL/jn+D/wwK
        C7MAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzQuMOu9qa//RD5A/6qcof9IRUb/5ePm//v4
        +//69/r/+vf6//r3+v/69/r/+vf6//r3+v/69/r/+vf6//r3+v/28/b/ZGFj/6qdof9LRkf/qpyh/0Q+
        QP+9qa//NC4w6wAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAAAAB7cmZp/7ilqv9IQkT/va60/0ZE
        Rf/j4uX/+fj7//n4+//5+Pv/+fj7//j3+v/49/r/+Pf6//j3+v/49/r/+Pf6//b2+f+sqq3/x7q9/0hC
        RP+9rrT/SEJE/7ilqv9yZmn/AAAAewICAgAAAAAAAAAAAAAAAAAAAAAAAAAADxMREcW0oaf/moqP/1xV
        V//Jub//RUNE/+Pi5f/6+fz/7u3w/+bl6P/k4+b/9fT3//j3+v/49/r/+Pf6//j3+v/7+v3/+fj7//z5
        /P/m2N3/RUBC/8m5v/9cVVf/m4qP/7Shp/8RDxDGAAAAEQAAAAAAAAAAAAAAAAAAAAAAAABDQDk79N/I
        zv93a27/e3F0/869w/9FQ0T/4+Ll//38///Ew8X/RERF/1tbXP/q6ez/+fj7//j3+v/5+Pv/8/L1/8fH
        yP/u7fD/+/j7/+XX3P9FQEL/zb3D/3txdP93a27/38fO/15UV+IKCQoiGhcYAAAAAAAAAAAAJyMkAAAA
        AI+Ac3f/6NDX/1lQUv+dkZX/zr7E/0VDRP/k4+b/6ejr/6Wkp/8wMDH/VlZY/7y8v//z8vX/+fj7//X0
        9/+Li4z/HBsl/3Z2d//y7/L/5tjd/0VAQv/OvsT/nZGV/1lQUv/lztX/3MXL6Yx+gjz///8AAAAAAAAA
        AAAAAAAZHBka1L+rsf/cxcz/Qz0//72us//NvcP/RUNE/+Pi5f92dXX/JBwF/xENBP8cFgT/JiER/6+v
        sf/6+fz/j46P/ycjSv9TSb7/KSVX/3p4ev/f0tb/RkBC/829w/+9rrT/RT9B/9zFzP/OuL//LCcpyAAA
        ABgAAAAAAAAAAAAAAFRPR0n648vS/9O9xP9kW17/2snP/8y7wf9FQ0T/4eHk/2FgYf89LAD/ZEoB/2RK
        Af8oHgP/oaGk/+Lh4/8tLDv/SkGu/0Q8nf9PRrj/JSI6/7msrv9IQ0T/zLzC/9fFzP9AOz3/yLO5/+LL
        0v9ORkj7AAAAVAAAAAAAAAADBQQEoZKCh//q0tn/4crR/9vHzv/v3OP/yrrA/0VDRP/l5Of/0NDS/z47
        N/9DMAD/MiUC/2ZmZ//s6+7/7ezv/1taYP8lIzv/OTk8/yclPP9LSFL/zsHE/0ZBQv/LusD/6NXc/0tF
        R/+tm6D/7dTb/5GChv8EBAShAAAAAwAAAConIyTgybS6/+nR2P+fj5P/jYKG//Lf5v/KusD/RUNE/+Pi
        5f/8+/7/zc3Q/z4+Pf9mZWb/6uns//r5/P/5+Pv/5+bp/8zLzf/p6Or/zs7P/+Pg4//o2t7/T0lL/829
        w//x3eT/Y1te/41+gv/r09r/yrW7/ycjJN8AAAAqAAAAd2BWWfyKfID/qpme/25iZv+Cd3v/9ODo/8q6
        wP9FQ0T/4+Ll//n4+//7+v3/5+bp//Dv8v/6+fz/+Pf6//j3+v/5+Pv/+Pf6/9jX2f/09Pf/+vj7//fo
        7f/PwMX/59Xc//Lf5v+EeX3/bmJm/8m0uv+Ac3b/WVBS/AAAAHYFBQW+loaL/4l6f/+2o6n/U0tN/6aZ
        nv/04Oj/yrrA/0VDRP/j4uX/+/r9/+Tj5v+EhIT/oJ+g//X09//5+Pv/+Pf6//v6/f/n5un/VFRV/9fW
        2f/9+v3/8uPo/6SXm//fzdT/89/m/6aZnv9TSk3/zLe9/3Roa/+Ien7/BgYGvQEBAY1FPkD7nIyQ/8Cs
        sv9COz3/xLW6//Pf5v/KusD/RUNE/+Tj5v/q6ev/Xl5h/yYiWf8lIkb/kZGR//b1+P/6+fz/x8fJ/2Fh
        Yv8YGBr/VVVW/7u4u//m2Nz/RD9A/8q6wP/z3+b/xLW6/0I7Pf/ArLL/mYmO/0Q9P/sBAQGNAAAAEAAA
        AF0KCQmvIh4f6TUxMv/cytH/8d7l/8q6wP9FQ0T/5OTm/4B/gP8rJmD/bF/0/11S1P8mJED/urm6//b1
        +P9TUlD/NCUA/zkqAP86KQD/QDw4/9fJzf9GQUP/yrrA//He5f/cytH/NTEy/yIeH+kKCQmvAAAAXQAA
        ABAAAAAAAAAAAAAAAAMAAABkTEVI++rY3//x3eX/yrrA/0VDRP/k4+b/b29w/zErc/9xZP7/Zlrm/yMf
        RP+tra3/+fj8/2ppav8yJQD/dlcC/zwsAP9VUlH/3M7T/0ZBQv/KusD/8N3k/+rX3v9MRkj7AAAAZAAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGluZWn/5dPa/+zZ4P/LusD/RUNE/+Xk5//b293/RkZN/zMt
        ev8oJFj/dXR1//Hw8v/6+fz/2djc/zEvKf8/LQD/JyMZ/8nHyv/o2t7/RUBC/8q6wP/v3OP/6Nbd/21l
        aP8AAABpAAAAAAAAAAAAAAAAAAAAAAAAAAAZFxgAAgEBk4uAhP9uZWj/wrK4/828w/9FQ0T/4+Ll//z7
        /v/U09X/Xl1f/318fv/t7O//+fj7//j3+v/5+Pv/pqan/05NTP+VlJb/9/T4/+bY3P9FQEL/y7vB/97N
        0/9uZWj/enF0/wMDA5MZFxcAAAAAAAAAAAAAAAAAAAAAAAAAAAYMCwy1p5qf/4Z8gP/Xxsz/zr3D/0VD
        RP/j4uX/+vn8//r5/P/29ff/+Pf6//n4+//49/r/+Pf6//j3+v/5+Pv/9PP2//n4+//69/r/5dfc/0VA
        Qv/MvML/6dbd/3xydv+Sh4v/Dg0NtQAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAQQEBJBVTlD/mIyQ/7qr
        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
        AD//gAH//wAA//8AAP//AAD//wAA//8AAP8=
</value>
  </data>
</root>